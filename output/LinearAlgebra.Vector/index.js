// Generated by purs version 0.11.6
"use strict";
var Data_Array = require("../Data.Array");
var Data_Boolean = require("../Data.Boolean");
var Data_Eq = require("../Data.Eq");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semiring = require("../Data.Semiring");
var Data_Tuple = require("../Data.Tuple");
var Global = require("../Global");
var Prelude = require("../Prelude");
var sum = function (dictSemiring) {
    return function (xs) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring))(xs);
    };
};
var mulScalar = function (d) {
    return function (vs) {
        return Data_Functor.map(Data_Functor.functorArray)(function (v) {
            return v * d;
        })(vs);
    };
};
var dot = function (dictSemiring) {
    return function (xs) {
        return function (ys) {
            if (Data_Array.length(xs) !== Data_Array.length(ys)) {
                return Data_Maybe.Nothing.value;
            };
            if (Data_Boolean.otherwise) {
                return Data_Maybe.Just.create(sum(dictSemiring)(Data_Array.zipWith(Data_Semiring.mul(dictSemiring))(xs)(ys)));
            };
            throw new Error("Failed pattern match at LinearAlgebra.Vector line 41, column 1 - line 41, column 58: " + [ xs.constructor.name, ys.constructor.name ]);
        };
    };
};
var diff = function (xs) {
    return function (ys) {
        if (Data_Array.length(xs) !== Data_Array.length(ys)) {
            return [  ];
        };
        if (Data_Boolean.otherwise) {
            return Data_Array.zipWith(Data_Ring.sub(Data_Ring.ringNumber))(xs)(ys);
        };
        throw new Error("Failed pattern match at LinearAlgebra.Vector line 25, column 1 - line 25, column 56: " + [ xs.constructor.name, ys.constructor.name ]);
    };
};
var argmin = function (vs) {
    var xs = Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(vs);
    var f = function (tu) {
        return function (tv) {
            var $8 = Data_Tuple.snd(tv) < Data_Tuple.snd(tu);
            if ($8) {
                return tv;
            };
            return tu;
        };
    };
    return Data_Tuple.fst(Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(new Data_Tuple.Tuple(0, Global.infinity))(xs));
};
var argmax = function (vs) {
    var xs = Data_Array.mapWithIndex(Data_Tuple.Tuple.create)(vs);
    var f = function (tu) {
        return function (tv) {
            var $9 = Data_Tuple.snd(tv) > Data_Tuple.snd(tu);
            if ($9) {
                return tv;
            };
            return tu;
        };
    };
    return Data_Tuple.fst(Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(new Data_Tuple.Tuple(0, -Global.infinity))(xs));
};
var add = function (dictSemiring) {
    return function (xs) {
        return function (ys) {
            if (Data_Array.length(xs) !== Data_Array.length(ys)) {
                return [  ];
            };
            if (Data_Boolean.otherwise) {
                return Data_Array.zipWith(Data_Semiring.add(dictSemiring))(xs)(ys);
            };
            throw new Error("Failed pattern match at LinearAlgebra.Vector line 33, column 1 - line 33, column 59: " + [ xs.constructor.name, ys.constructor.name ]);
        };
    };
};
module.exports = {
    add: add, 
    argmax: argmax, 
    argmin: argmin, 
    diff: diff, 
    dot: dot, 
    mulScalar: mulScalar, 
    sum: sum
};
