// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.select = function(selector) {
      return function() {
          return jQuery(selector);
      };
  };

  exports.create = function(html) {
      return function() {
          return jQuery(html);
      };
  };

  exports.setAttr = function(attr) {
      return function(val) {
          return function(ob) {
              return function() {
                  ob.attr(attr, val);
              };
          };
      };
  };

  exports.attr = function(attrs) {
      return function(ob) {
          return function() {
              ob.attr(attrs);
          };
      };
  };

  exports.css = function(props) {
      return function(ob) {
          return function() {
              ob.css(props);
          };
      };
  };

  exports.getCss = function(propName) {
      return function(ob) {
          return function() {
              return ob.css(propName)
          }
      }
  } 

  exports.toggleClass = function(cls) {
      return function(ob) {
          return function() {
              ob.toggleClass(cls);
          };
      };
  };

  exports.setClass = function(cls) {
      return function(flag) {
          return function(ob) {
              return function() {
                  ob.toggleClass(cls, flag);
              };
          };
      };
  };

  exports.append = function(ob1) {
      return function(ob) {
          return function() {
              ob.append(ob1);
          };
      };
  };

  exports.body = function() {
      return jQuery(document.body);
  };

  exports.on = function(evt) {
      return function(act) {
          return function(ob) {
              return function() {
                  ob.on(evt, function(e) {
                      act(e)(jQuery(this))();
                  });
              };
          };
      };
  };


  exports.off = function(evt) {
      return function(ob) {
          return function() {
              return ob.off(evt);
          };
      };
  };

  exports.getPageX = function(e) {
      return function() {
          return e.pageX;
      };
  };

  exports.getPageY = function(e) {
      return function() {
          return e.pageY;
      };
  };
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  
  // | This module defines foreign types and functions for working with

  // | the jQuery library.
  "use strict";
  var $foreign = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];            

  // | Add the specified CSS class.
  var addClass = function (cls) {
      return $foreign.setClass(cls)(true);
  };
  exports["addClass"] = addClass;
  exports["append"] = $foreign.append;
  exports["body"] = $foreign.body;
  exports["create"] = $foreign.create;
  exports["css"] = $foreign.css;
  exports["getCss"] = $foreign.getCss;
  exports["getPageX"] = $foreign.getPageX;
  exports["getPageY"] = $foreign.getPageY;
  exports["off"] = $foreign.off;
  exports["on"] = $foreign.on;
  exports["select"] = $foreign.select;
  exports["setAttr"] = $foreign.setAttr;
})(PS["Control.Monad.Eff.JQuery"] = PS["Control.Monad.Eff.JQuery"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["setTimeout"] = $foreign.setTimeout;
})(PS["Control.Monad.Eff.Timer"] = PS["Control.Monad.Eff.Timer"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["writeSTRef"] = $foreign.writeSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["zero"] = zero;
  exports["semiringNumber"] = semiringNumber;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var singleton = function (a) {
      return [ a ];
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  exports["concatMap"] = concatMap;
  exports["index"] = index;
  exports["mapMaybe"] = mapMaybe;
  exports["singleton"] = singleton;
  exports["updateAt"] = updateAt;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["slice"] = $foreign.slice;
  exports["snoc"] = $foreign.snoc;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Ring = PS["Data.Ring"];
  var Prelude = PS["Prelude"];        
  var tail = function (dictPartial) {
      return function (xs) {
          return Data_Array.slice(1)(Data_Array.length(xs))(xs);
      };
  };
  exports["tail"] = tail;
})(PS["Data.Array.Partial"] = PS["Data.Array.Partial"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;

  exports.readFloat = parseFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global"];
  exports["isFinite"] = $foreign["isFinite"];
  exports["readFloat"] = $foreign.readFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.atan = Math.atan;

  exports.cos = Math.cos;    

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["atan"] = $foreign.atan;
  exports["cos"] = $foreign.cos;
  exports["pi"] = $foreign.pi;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Maybe = PS["Data.Maybe"];
  var Global = PS["Global"];
  var Prelude = PS["Prelude"];  
  var $$isFinite = Global["isFinite"];
  var fromString = (function () {
      var check = function (num) {
          if ($$isFinite(num)) {
              return new Data_Maybe.Just(num);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Number line 45, column 5 - line 46, column 39: " + [ num.constructor.name ]);
      };
      return function ($1) {
          return check(Global.readFloat($1));
      };
  })();
  exports["fromString"] = fromString;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function(exports) {
    "use strict";

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];                                                                        
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = lastIndexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === ($foreign.length(str) - $foreign.length(v) | 0)) {
              return Data_Maybe.Just.create($foreign.take(v1.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };                                                                                          
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var contains = function (pat) {
      return function ($48) {
          return Data_Maybe.isJust(indexOf(pat)($48));
      };
  };
  exports["contains"] = contains;
  exports["indexOf"] = indexOf;
  exports["lastIndexOf"] = lastIndexOf;
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["split"] = $foreign.split;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Global = PS["Global"];
  var Prelude = PS["Prelude"];        
  var sum = function (dictSemiring) {
      return function (xs) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring))(xs);
      };
  };
  var dot = function (dictSemiring) {
      return function (xs) {
          return function (ys) {
              if (Data_Array.length(xs) !== Data_Array.length(ys)) {
                  return Data_Maybe.Nothing.value;
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Just.create(sum(dictSemiring)(Data_Array.zipWith(Data_Semiring.mul(dictSemiring))(xs)(ys)));
              };
              throw new Error("Failed pattern match at LinearAlgebra.Vector line 41, column 1 - line 41, column 58: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var add = function (dictSemiring) {
      return function (xs) {
          return function (ys) {
              if (Data_Array.length(xs) !== Data_Array.length(ys)) {
                  return [  ];
              };
              if (Data_Boolean.otherwise) {
                  return Data_Array.zipWith(Data_Semiring.add(dictSemiring))(xs)(ys);
              };
              throw new Error("Failed pattern match at LinearAlgebra.Vector line 33, column 1 - line 33, column 59: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  exports["add"] = add;
  exports["dot"] = dot;
  exports["sum"] = sum;
})(PS["LinearAlgebra.Vector"] = PS["LinearAlgebra.Vector"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var LinearAlgebra_Vector = PS["LinearAlgebra.Vector"];
  var Prelude = PS["Prelude"];        
  var Dense = (function () {
      function Dense(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Dense.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Dense(value0, value1, value2);
              };
          };
      };
      return Dense;
  })();
  var zeros = function (r) {
      return function (c) {
          var r$prime = (function () {
              var $23 = r > 0;
              if ($23) {
                  return r;
              };
              return 1;
          })();
          var c$prime = (function () {
              var $24 = c > 0;
              if ($24) {
                  return c;
              };
              return 1;
          })();
          return new Dense(r$prime, c$prime, Data_Array.replicate(r$prime * c$prime | 0)(0.0));
      };
  };
  var row = function (r) {
      return function (v) {
          var i = (function () {
              var $47 = r >= 0 && r < v.value0;
              if ($47) {
                  return r * v.value1 | 0;
              };
              return 0;
          })();
          var j = (function () {
              var $48 = r >= 0 && r < v.value0;
              if ($48) {
                  return i + v.value1 | 0;
              };
              return 0;
          })();
          return Data_Array.slice(i)(j)(v.value2);
      };
  };
  var replicate = function (r) {
      return function (c) {
          return function (v) {
              if (r > 0 && c > 0) {
                  return Data_Maybe.Just.create(new Dense(r, c, Data_Array.replicate(r * c | 0)(v)));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at LinearAlgebra.Matrix line 62, column 1 - line 62, column 55: " + [ r.constructor.name, c.constructor.name, v.constructor.name ]);
          };
      };
  };
  var nrows = function (v) {
      return v.value0;
  };
  var rows = function (mat) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(nrows(mat) - 1 | 0))(function (v) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(row(v)(mat));
      });
  };
  var ncols = function (v) {
      return v.value1;
  };
  var multiply$prime = function (rx) {
      return function (cy) {
          return Control_Bind.bind(Control_Bind.bindArray)(rx)(function (v) {
              return Control_Bind.bind(Control_Bind.bindArray)(cy)(function (v1) {
                  return Control_Applicative.pure(Control_Applicative.applicativeArray)(Data_Maybe.fromMaybe(0.0)(LinearAlgebra_Vector.dot(Data_Semiring.semiringNumber)(v)(v1)));
              });
          });
      };
  };
  var identity$prime = function (n) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(1)(n))(function (v) {
          return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(1)(n))(function (v1) {
              return Control_Applicative.pure(Control_Applicative.applicativeArray)((function () {
                  var $74 = v === v1;
                  if ($74) {
                      return 1.0;
                  };
                  return 0.0;
              })());
          });
      });
  };
  var identity = function (n) {
      return new Dense(n, n, identity$prime(n));
  };
  var fromArray = function (r) {
      return function (c) {
          return function (vs) {
              if (r > 0 && (c > 0 && (r * c | 0) === Data_Array.length(vs))) {
                  return new Data_Maybe.Just(new Dense(r, c, vs));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at LinearAlgebra.Matrix line 87, column 1 - line 87, column 60: " + [ r.constructor.name, c.constructor.name, vs.constructor.name ]);
          };
      };
  };
  var element = function (r) {
      return function (c) {
          return function (v) {
              return Data_Array.index(v.value2)((r * v.value1 | 0) + c | 0);
          };
      };
  };
  var column = function (c) {
      return function (v) {
          return Data_Array.mapMaybe(function (i) {
              return Data_Array.index(v.value2)((i * v.value1 | 0) + c | 0);
          })(Data_Array.range(0)(v.value0 - 1 | 0));
      };
  };
  var columns = function (mat) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(ncols(mat) - 1 | 0))(function (v) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(column(v)(mat));
      });
  };
  var multiply = function (xs) {
      return function (ys) {
          if (ncols(xs) !== nrows(ys)) {
              return zeros(1)(1);
          };
          if (Data_Boolean.otherwise) {
              return Dense.create(nrows(xs))(ncols(ys))(multiply$prime(rows(xs))(columns(ys)));
          };
          throw new Error("Failed pattern match at LinearAlgebra.Matrix line 170, column 1 - line 170, column 60: " + [ xs.constructor.name, ys.constructor.name ]);
      };
  };
  exports["column"] = column;
  exports["columns"] = columns;
  exports["element"] = element;
  exports["fromArray"] = fromArray;
  exports["identity"] = identity;
  exports["multiply"] = multiply;
  exports["ncols"] = ncols;
  exports["nrows"] = nrows;
  exports["replicate"] = replicate;
  exports["row"] = row;
  exports["rows"] = rows;
  exports["zeros"] = zeros;
})(PS["LinearAlgebra.Matrix"] = PS["LinearAlgebra.Matrix"] || {});
(function(exports) {
    "use strict";
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Number = PS["Data.Number"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var LinearAlgebra_Matrix = PS["LinearAlgebra.Matrix"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var MatrixToString = function (toString) {
      this.toString = toString;
  };
  var transformMatrixToString = new MatrixToString(function (v) {
      return "(" + (Data_Maybe.fromMaybe("")(Data_String.stripPrefix(", ")(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (s) {
          return function (vec) {
              return s + Data_Foldable.foldl(Data_Foldable.foldableArray)(function (s$prime) {
                  return function (n) {
                      return s$prime + (", " + Data_Show.show(Data_Show.showNumber)(n));
                  };
              })("")(vec);
          };
      })("")(LinearAlgebra_Matrix.rows(v)))) + ")");
  });
  var toString = function (dict) {
      return dict.toString;
  };
  var rotationVectorToString = new MatrixToString(function (v) {
      return "(" + (Data_Maybe.fromMaybe("")(Data_String.stripPrefix(", ")(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (s) {
          return function (vec) {
              return s + Data_Foldable.foldl(Data_Foldable.foldableArray)(function (s$prime) {
                  return function (n) {
                      return s$prime + (", " + Data_Show.show(Data_Show.showNumber)(n));
                  };
              })("")(vec);
          };
      })("")(LinearAlgebra_Matrix.rows(v)))) + "deg)");
  });
  var noTransformation = Data_Maybe.fromMaybe(LinearAlgebra_Matrix.identity(1))(LinearAlgebra_Matrix.fromArray(4)(4)([ 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 ]));
  var transformMatrix = function (a) {
      if (Data_Array.length(a) === 16) {
          return Data_Maybe.fromMaybe(LinearAlgebra_Matrix.identity(1))(LinearAlgebra_Matrix.fromArray(4)(4)(a));
      };
      if (Data_Boolean.otherwise) {
          return noTransformation;
      };
      throw new Error("Failed pattern match at Matrices line 30, column 1 - line 30, column 51: " + [ a.constructor.name ]);
  };
  var toTransformMatrix = function (str) {
      if (Data_String.contains("matrix3d(")(str)) {
          var a = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (ar) {
              return function (s) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(ar)([ Data_Maybe.fromMaybe(0.0)(Data_Number.fromString(s)) ]);
              };
          })([  ])(Data_String.split(", ")(Data_Maybe.fromMaybe("")(Data_String.stripSuffix(")")(Data_Maybe.fromMaybe("")(Data_String.stripPrefix("matrix3d(")(str))))));
          var $13 = Data_Array.length(a) !== 16;
          if ($13) {
              return noTransformation;
          };
          return transformMatrix(a);
      };
      if (Data_Boolean.otherwise) {
          return noTransformation;
      };
      throw new Error("Failed pattern match at Matrices line 58, column 1 - line 58, column 47: " + [ str.constructor.name ]);
  };
  var noRotation = Data_Maybe.fromMaybe(LinearAlgebra_Matrix.identity(1))(LinearAlgebra_Matrix.fromArray(4)(1)([ 0.0, 0.0, 0.0, 0.0 ]));
  var rotationVector = function (a) {
      if (Data_Array.length(a) === 4) {
          return Data_Maybe.fromMaybe(LinearAlgebra_Matrix.identity(1))(LinearAlgebra_Matrix.fromArray(4)(1)(a));
      };
      if (Data_Boolean.otherwise) {
          return noRotation;
      };
      throw new Error("Failed pattern match at Matrices line 18, column 1 - line 18, column 49: " + [ a.constructor.name ]);
  };
  var sum = function (vs) {
      var add = function (v) {
          return function (v1) {
              var a = Data_Array.zipWith(Data_Semiring.add(Data_Semiring.semiringNumber))(LinearAlgebra_Matrix.column(0)(v))(LinearAlgebra_Matrix.column(0)(v1));
              var x = Data_Maybe.fromMaybe(0.0)(Data_Array.index(a)(0));
              var y = Data_Maybe.fromMaybe(0.0)(Data_Array.index(a)(1));
              return rotationVector(Data_Maybe.fromMaybe([  ])(Data_Array.updateAt(3)($$Math.sqrt(x * x + y * y))(a)));
          };
      };
      return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
          return function (v) {
              return add(acc)(v);
          };
      })(noRotation)(vs);
  };
  var multiply = function (v) {
      return function (v1) {
          return LinearAlgebra_Matrix.multiply(v)(v1);
      };
  };
  var changeSpeed = function (s) {
      return function (v) {
          var x = Data_Maybe.fromMaybe(0.0)(LinearAlgebra_Matrix.element(0)(0)(v));
          var y = Data_Maybe.fromMaybe(0.0)(LinearAlgebra_Matrix.element(1)(0)(v));
          var a = (function () {
              var $21 = y === 0.0;
              if ($21) {
                  return 0.0;
              };
              var $22 = x === 0.0;
              if ($22) {
                  return $$Math.pi / 2.0;
              };
              return $$Math.atan($$Math.abs(y / x));
          })();
          return rotationVector([ s * $$Math.cos(a) * (function () {
              var $23 = x < 0.0;
              if ($23) {
                  return -1.0;
              };
              return 1.0;
          })(), s * $$Math.sin(a) * (function () {
              var $24 = y < 0.0;
              if ($24) {
                  return -1.0;
              };
              return 1.0;
          })(), 0.0, s ]);
      };
  };
  var average = function (vs) {
      var v = sum(vs);
      var s = Data_Maybe.fromMaybe(0.0)(LinearAlgebra_Matrix.element(3)(0)(v)) / Data_Int.toNumber(Data_Array.length(vs));
      return changeSpeed(s)(v);
  };
  var angle = function (v) {
      return Data_Maybe.fromMaybe(0.0)(LinearAlgebra_Matrix.element(3)(0)(v));
  };
  exports["MatrixToString"] = MatrixToString;
  exports["angle"] = angle;
  exports["average"] = average;
  exports["changeSpeed"] = changeSpeed;
  exports["multiply"] = multiply;
  exports["noRotation"] = noRotation;
  exports["noTransformation"] = noTransformation;
  exports["rotationVector"] = rotationVector;
  exports["sum"] = sum;
  exports["toString"] = toString;
  exports["toTransformMatrix"] = toTransformMatrix;
  exports["transformMatrix"] = transformMatrix;
  exports["transformMatrixToString"] = transformMatrixToString;
  exports["rotationVectorToString"] = rotationVectorToString;
})(PS["Matrices"] = PS["Matrices"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_JQuery = PS["Control.Monad.Eff.JQuery"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_Partial = PS["Data.Array.Partial"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var $$Math = PS["Math"];
  var Matrices = PS["Matrices"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var speedSensitivity = 15;
  var rotationScale = 0.2;
  var rotateCube = function (transformRef) {
      return function (rotation) {
          return function __do() {
              var v = Control_Monad_Eff_JQuery.select(".cube")();
              var v1 = Control_Monad_ST.readSTRef(transformRef)();
              Control_Monad_Eff_JQuery.css({
                  transform: "matrix3d" + (Matrices.toString(Matrices.transformMatrixToString)(v1) + (" rotate3d" + Matrices.toString(Matrices.rotationVectorToString)(Matrices.multiply(v1)(rotation))))
              })(v)();
              var v2 = Control_Monad_Eff_JQuery.getCss("transform")(v)();
              return Matrices.toTransformMatrix(v2);
          };
      };
  };
  var startSpinner = function (transformRef) {
      return function (velocityRef) {
          var spinner = function __do() {
              var v = Control_Monad_ST.readSTRef(velocityRef)();
              (function () {
                  var $40 = Matrices.angle(v) !== 0.0;
                  if ($40) {
                      return function __do() {
                          var v1 = rotateCube(transformRef)(v)();
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(transformRef)(v1))();
                      };
                  };
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              })()();
              var v1 = DOM_HTML.window();
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_HTML_Window.requestAnimationFrame(spinner)(v1))();
          };
          return spinner;
      };
  };
  var plotCube = function __do() {
      var v = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("front_face")(v)();
      Control_Monad_Eff_JQuery.addClass("face")(v)();
      var v1 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("back_face")(v1)();
      Control_Monad_Eff_JQuery.addClass("face")(v1)();
      var v2 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("right_face")(v2)();
      Control_Monad_Eff_JQuery.addClass("face")(v2)();
      var v3 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("left_face")(v3)();
      Control_Monad_Eff_JQuery.addClass("face")(v3)();
      var v4 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("top_face")(v4)();
      Control_Monad_Eff_JQuery.addClass("face")(v4)();
      var v5 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("bottom_face")(v5)();
      Control_Monad_Eff_JQuery.addClass("face")(v5)();
      var v6 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.addClass("cube")(v6)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateX(-100px) translateY(-100px) translateZ(100px)", 
          backgroundColor: "rgba(57, 42, 118, 0.9)"
      })(v)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateX(-100px) translateY(-100px) translateZ(-100px)", 
          backgroundColor: "rgba(78, 52, 195, 0.9)"
      })(v1)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateY(-100px) rotateY(90deg)", 
          backgroundColor: "rgba(101, 90, 151, 0.9)"
      })(v2)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateY(-100px) translateX(-200px) rotateY(90deg)", 
          backgroundColor: "rgba(115, 90, 225, 0.9)"
      })(v3)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateX(-100px) translateY(-200px) rotateX(90deg)", 
          backgroundColor: "rgba(35, 27, 70, 0.9)"
      })(v4)();
      Control_Monad_Eff_JQuery.css({
          transform: "translateX(-100px) rotateX(90deg)", 
          backgroundColor: "rgba(51, 39, 100, 0.9)"
      })(v5)();
      Control_Monad_Eff_JQuery.css({
          position: "relative", 
          transformStyle: "preserve-3d"
      })(v6)();
      Control_Monad_Eff_JQuery.append(v)(v6)();
      Control_Monad_Eff_JQuery.append(v1)(v6)();
      Control_Monad_Eff_JQuery.append(v2)(v6)();
      Control_Monad_Eff_JQuery.append(v3)(v6)();
      Control_Monad_Eff_JQuery.append(v4)(v6)();
      Control_Monad_Eff_JQuery.append(v5)(v6)();
      var v7 = Control_Monad_Eff_JQuery.create("<div>")();
      Control_Monad_Eff_JQuery.setAttr("id")("cube-wrapper")(v7)();
      Control_Monad_Eff_JQuery.css({
          position: "absolute", 
          left: "50%", 
          top: "50%", 
          perspective: "450px"
      })(v7)();
      Control_Monad_Eff_JQuery.append(v6)(v7)();
      var v8 = Control_Monad_Eff_JQuery.body();
      Control_Monad_Eff_JQuery.append(v7)(v8)();
      Control_Monad_Eff_JQuery.css({
          width: "100%", 
          height: "100%"
      })(v8)();
      var v9 = Control_Monad_Eff_JQuery.select(".face")();
      Control_Monad_Eff_JQuery.css({
          position: "absolute", 
          width: "200px", 
          height: "200px", 
          border: "solid black 1px"
      })(v9)();
      return Control_Monad_Eff_JQuery.css({
          transform: "rotateX(-45deg)rotateY(45deg)"
      })(v6)();
  };
  var initialSpeed = function (velocityRef) {
      return function (mousePosRef) {
          return function (runFlagRef) {
              var looper = function (prevPos) {
                  return function (velocities) {
                      var speedometer = function __do() {
                          var v = Control_Monad_ST.readSTRef(mousePosRef)();
                          var r = Matrices.rotationVector([ -(v.y - prevPos.y) * rotationScale, (v.x - prevPos.x) * rotationScale, 0.0, 0.0 ]);
                          var newVels = Data_Array.snoc(Data_Array_Partial.tail()(velocities))(r);
                          var v1 = Control_Monad_ST.readSTRef(runFlagRef)();
                          if (v1) {
                              return looper(v)(newVels)();
                          };
                          var v2 = Control_Monad_ST.readSTRef(velocityRef)();
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(velocityRef)(Matrices.sum([ Matrices.average(newVels), v2 ])))();
                      };
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(speedSensitivity)(speedometer));
                  };
              };
              return function __do() {
                  var v = Control_Monad_ST.readSTRef(mousePosRef)();
                  return looper(v)(Data_Array.replicate(5)(Matrices.noRotation))();
              };
          };
      };
  };
  var framesPerSecond = 60;
  var decelRate = 30.0 / Data_Int.toNumber(framesPerSecond);
  var startMouseHandlers = function (transformRef) {
      return function (velocityRef) {
          return function __do() {
              var v = Control_Monad_Eff_JQuery.body();
              var v1 = Control_Monad_ST.newSTRef({
                  x: 0.0, 
                  y: 0.0
              })();
              var downHandler = function (event) {
                  return function (jq) {
                      return function __do() {
                          var v2 = Control_Monad_Eff_JQuery.getPageX(event)();
                          var v3 = Control_Monad_Eff_JQuery.getPageY(event)();
                          Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v1)({
                              x: v2, 
                              y: v3
                          }))();
                          var v4 = Control_Monad_ST.newSTRef(true)();
                          var moveHandler = function (event$prime) {
                              return function (jq$prime) {
                                  return function __do() {
                                      var v5 = Control_Monad_Eff_JQuery.getPageX(event$prime)();
                                      var v6 = Control_Monad_Eff_JQuery.getPageY(event$prime)();
                                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(v1)({
                                          x: v5, 
                                          y: v6
                                      }))();
                                      var dx = -(v6 - v3);
                                      var dy = v5 - v2;
                                      var rotation = Matrices.rotationVector([ dx, dy, 0.0, $$Math.sqrt(dx * dx + dy * dy) * rotationScale ]);
                                      return rotateCube(transformRef)(rotation)();
                                  };
                              };
                          };
                          var upHandler = function (event$prime) {
                              return function (jq$prime) {
                                  return function __do() {
                                      var v5 = Control_Monad_Eff_JQuery.select(".cube")();
                                      Control_Monad_Eff_JQuery.off("mousemove")(v)();
                                      var v6 = Control_Monad_Eff_JQuery.getCss("transform")(v5)();
                                      Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(transformRef)(Matrices.toTransformMatrix(v6)))();
                                      return Control_Monad_ST.writeSTRef(v4)(false)();
                                  };
                              };
                          };
                          var decelerator = function __do() {
                              var v5 = Control_Monad_ST.readSTRef(velocityRef)();
                              var v7 = Control_Monad_ST.readSTRef(v4)();
                              var $69 = v7 && Matrices.angle(v5) > 0.0;
                              if ($69) {
                                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST.writeSTRef(velocityRef)((function () {
                                      var $70 = Matrices.angle(v5) - decelRate > 0.0;
                                      if ($70) {
                                          return Matrices.changeSpeed(Matrices.angle(v5) - decelRate)(v5);
                                      };
                                      return Matrices.noRotation;
                                  })()))();
                                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff_Timer.setTimeout(1000 / framesPerSecond | 0)(decelerator))();
                              };
                              return Data_Unit.unit;
                          };
                          Control_Monad_Eff_JQuery.on("mousemove")(moveHandler)(v)();
                          Control_Monad_Eff_JQuery.on("mouseup")(upHandler)(v)();
                          decelerator();
                          return initialSpeed(velocityRef)(v1)(v4)();
                      };
                  };
              };
              return Control_Monad_Eff_JQuery.on("mousedown")(downHandler)(v)();
          };
      };
  };
  var run = function __do() {
      var v = Control_Monad_Eff_JQuery.select(".cube")();
      var v1 = Control_Monad_Eff_JQuery.getCss("transform")(v)();
      var v2 = Control_Monad_ST.newSTRef(Matrices.toTransformMatrix(v1))();
      var v3 = Control_Monad_ST.newSTRef(Matrices.noRotation)();
      startSpinner(v2)(v3)();
      startMouseHandlers(v2)(v3)();
      return Data_Unit.unit;
  };
  var main = function __do() {
      plotCube();
      return run();
  };
  exports["decelRate"] = decelRate;
  exports["framesPerSecond"] = framesPerSecond;
  exports["initialSpeed"] = initialSpeed;
  exports["main"] = main;
  exports["plotCube"] = plotCube;
  exports["rotateCube"] = rotateCube;
  exports["rotationScale"] = rotationScale;
  exports["run"] = run;
  exports["speedSensitivity"] = speedSensitivity;
  exports["startMouseHandlers"] = startMouseHandlers;
  exports["startSpinner"] = startSpinner;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
